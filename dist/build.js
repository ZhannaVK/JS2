(()=>{"use strict";Vue.component("cartItem",{props:["good"],template:'\n      <div class="cart-item">\n        <h3 class="cart-item-name">{{ good.product_name }}</h3>\n        <p class="cart-item-quantity">{{ good.quantity}}</p>\n        <p class="cart-item-price">{{ good.price }} руб.</p>\n        <button type="button" class="del-button" @click="delItem">Удалить из корзины</button>\n      </div>\n    ',methods:{delItem:function(){this.$emit("delOut",this.good.id_product)}}}),Vue.component("cartList",{props:["goods"],template:'\n        <div class="cart-list">\n            <cartItem v-for="good in goods" :good="good" :key="componentKey" @delOut="delFromCart(good.id_product)"></cartItem>\n            <p>В корзине {{countGoodsCart()}} товаров на сумму {{sumPrice()}} руб.</p>\n        </div>\n    ',data:()=>({componentKey:0}),methods:{forceRerender(){this.componentKey+=1},async delMethod(t){try{const o=await fetch(t,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify(this.goods)});return await o.json()}catch(t){console.log(t)}},countGoodsCart(){return" "+String(this.goods.reduce(((t,o)=>t+o.quantity),0))},sumPrice(){return this.goods.reduce(((t,o)=>t+o.price*o.quantity),0)},delFromCart(t){this.delMethod("/deleteFromBasket/:"+t).then((t=>{this.goods=t})),this.countGoodsCart(),this.sumPrice()}}}),Vue.component("goodsItem",{props:["good"],template:'\n      <div class="goods-item">\n        <h3>{{ good.product_name }}</h3>\n        <p>{{ good.price }} руб.</p>\n        <button type="button" class="add-button" @click="addItem">Добавить в корзину</button>\n      </div>\n    ',methods:{addItem:function(){this.$emit("addIn",this.good)}}}),Vue.component("goodsList",{props:["goods","goods2"],template:'\n    <div class="goods-list">\n        <goodsItem v-for="good in goods" :good="good" :key="good.id_product" @addIn="addInCart(good)"></goodsItem>\n    </div>\n    ',methods:{async postMethod(t){return await fetch(t,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(this.goods2)})},addInCart(t){let o=this.goods2.find((o=>o.id_product===t.id_product));o?o.quantity++:(t.quantity=1,this.goods2.push(t)),this.postMethod("/addToCart").then((t=>{this.goodscart=t}))}}}),Vue.component("search",{props:["value"],template:'\n        <input type="text" :value="value" @input="$emit(\'input\', $event.target.value)">    '}),new Vue({el:"#app",template:'<div>\n    <header>\n            <nav class="menu center">\n\n                <search v-model="searchLine"></search>\n                <button type="button" @click="filterGoods()">Искать</button>\n                <br>\n                <button class="cart-button" @click="hideShowCart">{{ isVisibleCart ? \'Скрыть корзину\' : \'Корзина\' }}</button>\n            </nav>\n\n        </header>\n    <main>\n            <div class="center main">\n                <goodsList :goods="filteredGoods" :goods2="goodscart" v-if="!isVisibleCart"></goodsList>\n\n                <div class="cart" v-if="isVisibleCart">\n                    <br>\n                    <h2 class="cart-title">Товары в корзине</h2>\n                    <br>\n                    <cartList :goods="goodscart"></cartList>\n                </div>\n            </div>\n        </main></div>',data:{goods:[],filteredGoods:[],goodscart:[],searchLine:"",isVisibleCart:!1},methods:{filterGoods(){const t=new RegExp(this.searchLine,"i");this.filteredGoods=this.goods.filter((o=>t.test(o.product_name)))},async getJson(t){try{const o=await fetch(t);return await o.json()}catch(t){console.log(t)}},hideShowCart(){this.isVisibleCart=!this.isVisibleCart,this.isVisibleCart&&this.getJson("/getCart").then((t=>{this.goodscart=t}))}},mounted(){this.getJson("/catalogData").then((t=>{this.goods=t,this.filterGoods("")})),this.getJson("/getCart").then((t=>{this.goodscart=t}))}})})();